# =============================================================================
# RAGX TASK SPEC TEMPLATE (GUIDED / REPLACE-ME)
# -----------------------------------------------------------------------------
# RULES:
# - Replace every <…> placeholder with a concrete value. No angle brackets may remain.
# - Choose ONE where alternatives are shown (e.g., manual|label-gated) and delete the other.
# - Delete optional sections that don't apply to this task type.
# - Do NOT change: metadata.owners: ["pfahlr@gmail.com"]
# =============================================================================

version: <number>            # e.g., 1
id: <task_id>                # e.g., "06c_mcp_envelope_and_schema_validation"
title: <string>              # e.g., "MCP Envelope and Schema Validation"
summary: >
  <high-level summary of the overall effort (1–3 lines)>

description: >
  <narrative describing goals, constraints, success criteria, and context (4–10 lines)>

metadata:
  owners: [ "pfahlr@gmail.com" ]     # DO NOT CHANGE
  labels: [ "<label-1>", "<label-2>", "<label-3>" ]  # e.g., "tests-first", "impl", "observability", "mcp"
  priority: <P0|P1|P2|P3>
  risk: <low|medium|high>
  last_updated: "<YYYY-MM-DD>"
  links:
    - { type: "design_doc",    url: "<url>" }
    - { type: "tracking_issue", url: "<url>" }   # delete if not applicable
  tickets: [ "<JIRA-1234>" ]                     # or []

strategy:
  tests_first: true
  deterministic: true
  golden_management: <manual|label-gated>

scope:
  goals:
    - <goal 1>
    - <goal 2>
  non_goals:
    - <explicitly out-of-scope item>

assumptions:
  - <assumption 1>
constraints:
  - <constraint 1>            # e.g., "camelCase keys on disk", "JSON Schema Draft 2020-12"

component_ids: [ "<component-1>", "<component-2>" ]
depends_on:   [ "<task-or-comp-1>", "<task-or-comp-2>" ]
arg_spec:     [ "<arg-1>", "<arg-2>" ]           # delete if N/A

config_flags:
  - { name: "--host",               env: "MCP_HOST",               default: "0.0.0.0", type: "str",  desc: "HTTP bind host" }
  - { name: "--port",               env: "MCP_PORT",               default: 8070,      type: "int",  desc: "HTTP bind port" }
  - { name: "--once",               env: null,                     default: false,     type: "bool", desc: "Serve one request then exit (deterministic)" }
  - { name: "--deterministic-ids",  env: "MCP_DETERMINISTIC_IDS",  default: false,     type: "bool", desc: "UUID5 requestId for goldens" }
  - { name: "--log-level",          env: "MCP_LOG_LEVEL",          default: "info",    type: "str",  desc: "Log verbosity" }

observability_requirements:
  - Emit structured JSONL logs with required fields and flush-on-write.
  - Retain last 5 runs and maintain a stable "latest" symlink.
  - Record retries/errors explicitly; graceful shutdown must flush logs.

# ---------- Reusable anchors (x-*) ----------
x-volatile-fields: &volatile_fields [ ts, durationMs, runId, traceId, spanId, attemptId, requestId ]
x-log-event-fields: &log_event_fields
  - ts
  - agentId
  - taskId
  - stepId
  - transport
  - route
  - method
  - traceId
  - spanId
  - requestId
  - status
  - durationMs
  - attempt
  - inputBytes
  - outputBytes
  - error
  - metadata
x-ci-gates: &ci_gates [ lint, typecheck, unit, integration, e2e, acceptance ]
x-python-matrix: &python_matrix [ "3.11", "3.12" ]
x-os-matrix: &os_matrix [ "ubuntu-latest" ]
# ------------------------------------------

# ===== Optional sections (DELETE if not relevant) =====

server_contract:  # (optional)
  transports:
    http:
      framework: fastapi
      endpoints:
        - { method: GET,  path: /mcp/discover,          response: envelope }
        - { method: GET,  path: /mcp/prompt/{promptId}, response: envelope }
        - { method: POST, path: /mcp/tool/{toolId},     response: envelope }
        - { method: GET,  path: /healthz,               response: { status: ok } }
      shutdown: graceful (await tasks, flush logs)
    stdio:
      protocol: json-rpc 2.0 (newline-delimited)
      lifecycle:
        - read JSON from stdin
        - validate & dispatch to service
        - write JSON to stdout; flush per message
      control: [ cancel, graceful_shutdown ]
  shared_service:
    class: <ServiceClassName>                  # e.g., "MCPService"
    methods: [ discover, get_prompt, invoke_tool, health ]
    behavior:
      - validate inputs/outputs against schemas
      - deterministic seed (RAGX_SEED) + stable sorting
      - return envelope with ok|error and trace/span ids
  cli:
    command: <cli_command>                     # e.g., "mcp-server"
    flags: [ --http, --stdio, --host, --port, --once, --deterministic-ids, --log-level ]

classes_contract:  # (optional)
  language: python
  classes:
    - name: <ClassName>
      responsibilities: [ <single responsibility> ]
      methods:
        - signature: def do_work(self, item: Item) -> Result
          raises: [ ValueError ]
          invariants: [ idempotent, pure ]
    - name: <OtherClass>
      methods:
        - signature: @classmethod def from_config(cls, cfg: dict) -> "OtherClass"

interfaces_contract:  # (optional)
  protocols:
    - name: <InterfaceName>
      methods:
        - name: fetch
          params: [ url: str, timeout: float ]
          returns: bytes

cli_contract:  # (optional)
  program: <cli_command>
  commands:
    - name: build
      flags:
        - { name: --input,  type: path, required: true }
        - { name: --output, type: path, required: true }
      exit_codes:
        - { code: 0, meaning: ok }
        - { code: 2, meaning: invalid input }

schema_contract:  # (optional)
  draft: 2020-12
  files:
    - path: apps/schemas/<name>.schema.json
      kind: <input|output>
      required_fields: [ <fieldA>, <fieldB> ]

toolpack_contract:  # (optional)
  manifests:
    - apps/mcp_server/toolpacks/core/<name>.tool.yaml
  deterministic: true

datastore_contract:  # (optional)
  engine: <sqlite|postgres>
  schemas:
    - name: <table>
      columns:
        - { name: id,         type: TEXT,      pk: true }
        - { name: created_at, type: TIMESTAMP }
      indexes:
        - { fields: [created_at], unique: false }
  migrations_dir: db/migrations

# ===== Core logging/metrics/tracing/security (toggle on as needed) =====

structured_logging_contract:
  format: jsonl
  storage_path_prefix: runs/<area>/<task>
  latest_symlink: runs/<area>/<task>.latest.jsonl
  retention: keep-last-5
  event_fields: *log_event_fields
  metadata_fields:
    - runId
    - attemptId
    - schemaVersion
    - deterministic
  volatile_fields: *volatile_fields

metrics_contract:  # (optional)
  counters:
    - { name: mcp_requests_total, labels: [transport, route, status] }
    - { name: mcp_retries_total,  labels: [transport, route] }
  histograms:
    - { name: mcp_request_duration_seconds, labels: [transport, route, status] }
  gauges:
    - { name: mcp_stdio_queue_depth, labels: [] }

tracing_contract:  # (optional)
  spans:
    - { name: http.request,  attributes: [transport, route, requestId] }
    - { name: stdio.message, attributes: [transport, route, requestId] }
  propagation: [ traceId, spanId ]

security_privacy:  # (optional)
  data_classification: internal
  authn: [ bearer_http ]
  authz: [ { role: "invoke:tool" } ]
  pii_redaction:
    denylist_keys: [ authorization, apiKey, password, token ]
    policy: strip-before-serialize

log_diff_strategy:  # (optional)
  tool: deepdiff.DeepDiff
  baseline_path: tests/fixtures/<area>/<task>_golden.jsonl
  compatibility_symlink: tests/fixtures/<area>/logs/<task>_golden.jsonl
  whitelist_fields: *volatile_fields
  notes: >
    <policy for diffing logs and ignoring volatile fields>

artifacts:
  schemas:
    paths:
      - apps/schemas/<name>.schema.json
  toolpacks:
    paths:
      - apps/mcp_server/toolpacks/core/<name>.tool.yaml
  python_modules:
    paths:
      - src/<pkg>/<module>.py
  structured_logs:
    path: runs/<area>/<task>.latest.jsonl
  golden_fixtures:
    paths:
      - tests/fixtures/<area>/<task>_golden.jsonl
      - tests/fixtures/<area>/logs/<task>_golden.jsonl
  doc_fixtures:
    paths:
      - tests/fixtures/<area>/<name>.json
  documentation:
    path: docs/<area>/<task>.md
  log_diff_script:
    path: scripts/diff_<task>_logs.py

test_matrix:
  python: *python_matrix
  os: *os_matrix

test_plan:
  unit:
    - tests/unit/<module>/test_<topic>_spec.py
    - tests/unit/<module>/test_<topic>_errors.py
  integration:
    - tests/integration/<topic>/test_round_trip_spec.py
  e2e:
    - tests/e2e/test_<task>.py
  property_based:
    - tests/property/test_<topic>_contracts.py
  fixtures:
    - tests/fixtures/<area>/<task>_golden.jsonl

ci:
  xfail_marker: "<marker-name>"                 # e.g., "spec_xfail"
  workflows:
    - name: <workflow-name>                     # e.g., "ci"
      gates: *ci_gates
      artifacts: [ "<glob-1>", "<glob-2>" ]     # e.g., "runs/**.jsonl", "apps/**/schemas/**.json"
      cache_dependency_paths: [ "<path-1>", "<path-2>" ]  # e.g., "requirements*.txt"

# ===== Everything below is now explicitly REPLACE-ME demo text =====

actions:
  - stage: <stage-name-1>                       # e.g., "tests"
    summary: <stage-summary-1>                  # e.g., "Author executable specs and fixtures (tests-first)."
    tasks:
      - <task-item-1>                           # e.g., "add NotImplementedError stubs matching contracts"
      - <task-item-2>                           # e.g., "add JSON Schemas and minimal manifests"
      - <task-item-3>                           # e.g., "add CLI skeletons without business logic"
  - stage: <stage-name-2>                       # e.g., "implementation"
    summary: <stage-summary-2>
    tasks:
      - <task-item-1>                           # e.g., "implement classes/interfaces/CLI per contracts"
      - <task-item-2>                           # e.g., "integrate schemas/toolpacks/datastore"
      - <task-item-3>                           # e.g., "ensure deterministic behavior (RAGX_SEED, stable sorting)"
  - stage: <stage-name-3>                       # e.g., "observability"
    summary: <stage-summary-3>
    tasks:
      - <task-item-1>                           # e.g., "emit JSONL logs and validate schema"
      - <task-item-2>                           # e.g., "expose /metrics and propagate spans"
      - <task-item-3>                           # e.g., "enforce PII redaction"
  - stage: <stage-name-4>                       # e.g., "hardening"
    summary: <stage-summary-4>
    tasks:
      - <task-item-1>                           # e.g., "add authn/z, input caps, timeouts, retries/backoff"
      - <task-item-2>                           # e.g., "add circuit breaker/backpressure if needed"
      - <task-item-3>                           # e.g., "switch to fast JSON codec; cache hot paths"

rollout_plan:
  phases:
    - name: <phase-name-1>                      # e.g., "dev"
      exit_criteria: [ "<criterion-1>", "<criterion-2>" ]
    - name: <phase-name-2>                      # e.g., "staging"
      exit_criteria: [ "<criterion-1>", "<criterion-2>" ]
    - name: <phase-name-3>                      # e.g., "prod"
      exit_criteria: [ "<criterion-1>", "<criterion-2>" ]

rollback_strategy:
  steps:
    - <step-1>
    - <step-2>
    - <step-3>

operational_runbooks:
  - name: <runbook-name-1>                      # e.g., "golden_diff_failed"
    steps:
      - <step-1>                                # e.g., "verify flags (RAGX_SEED, --deterministic-ids, --once)"
      - <step-2>                                # e.g., "if intended change, run guarded --update-golden and open PR"
  - name: <runbook-name-2>                      # e.g., "elevated_error_rate"
    steps:
      - <step-1>                                # e.g., "check rate limits/circuit breaker and recent deploys"
      - <step-2>                                # e.g., "inspect /metrics and traces; roll back if needed"

maintenance:
  deprecation_policy: >
    <policy statement>                          # e.g., "Provide 1 minor version with dual-writing logs before changing logging schema."
  upgrade_notes:
    - <operator-note-1>                         # e.g., "Requires new env var XYZ"
    - <operator-note-2>

acceptance:
  - <acceptance-criterion-1>                    # e.g., "All tests pass; no xfail markers remain for this task."
  - <acceptance-criterion-2>                    # e.g., "Logs validate against schema; DeepDiff passes with whitelist."
  - <acceptance-criterion-3>                    # e.g., "Rotation keeps ≤5 files; latest symlink updated."
  - <acceptance-criterion-4>                    # e.g., "Documentation updated (spec + impl + ops notes)."
